#!/bin/bash
# Title: orion
# Description: Load balancer for Artemis NTVM. Orion monitors the Artemis scan queue and scans files as worker slots become available
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Andrew Withers (atw127@psu.edu, atw31337@gmail.com)

CONF=/etc/artemis.conf

exec 2>> /var/log/artemis.err
# exec 2> >(sed "s/^/$(date +'%b %e %Y %T'): /" >> /var/log/artemis.err)

autoStop() {
printf "%s: Low memory detected! Emergency stop sequence activated.\n" "$(date)" >> /var/log/artemis.err
service artemis stop
kill -9 "$(pgrep -x preScan)" 2> /dev/null
kill -9 "$(pgrep -x orion | grep -v $BASHPID)" 2> /dev/null
exit
}

file_integrity_chk() {   # checks and, if necessary, waits for a file to finish being written to disk
local hash
while [[ $(sha256sum "$1" | cut -d' ' -f1) != "$hash" ]] || [[ -n $(lsof $1) ]]; do
        hash=$(sha256sum "$1" | cut -d' ' -f1)
        sleep 0.1
done
}

sendAlert() {
TFILE=$(mktemp -p /tmp/artemis/) # Temporary file for alert email output
VSIG=$(grep "$FILENAME" /var/log/virus-scan.log | cut -d' ' -f2)        # Virus signature from ClamScan output
OrigFile=$(echo -e $(grep "$FILENAME" /opt/artemis/logs/artemis-files.log | awk -F"," '{for(i=1;i<=NF;i++){if ($i ~ /filename/){print $i}}}') | sed -E 's/"filename":|"//g')
if [[ -z $OrigFile ]] && [[ -f /opt/artemis/logs/artemis-files.log.1.gz ]]; then
	TEMPID=$(date +%s%N)
        file_integrity_chk /opt/artemis/logs/artemis-files.log.1.gz # Ensure that the file has been completely written to disk during log rotation before proceeding
        cp /opt/artemis/logs/artemis-files.log.1.gz /tmp/artemis/"$TEMPID".temp.gz
        gzip -d /tmp/artemis/"$TEMPID".temp.gz
	OrigFile=$(echo -e $(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | awk -F"," '{for(i=1;i<=NF;i++){if ($i ~ /filename/){print $i}}}') \
	| sed -E 's/"filename":|"//g')
	rm /tmp/artemis/"$TEMPID".tmp
fi
printf "From: %s\nTo: %s\nSubject: Malware Detected!\n\n" "$HOSTNAME" "$EMAIL"  > "$TFILE"
printf "%s: %s has detected malware on the network.\n" "$TSTAMP" "$HOSTNAME" >> "$TFILE"
if [[ -n $VSIG ]]; then
	printf "Scan Result: %s\n" "$VSIG"
fi
printf "SHA256: %s\n" "$SHA256" >> "$TFILE"
printf "MD5: %s\n" "$MD5" >> "$TFILE"
[[ -n $OrigFile ]] && printf "Original filename: %s\n" "$OrigFile" >> "$TFILE"
[[ -n $IDIR ]] &&  printf "A copy of the infected file(s) can be located in %s\n" "$IDIR" >> "$TFILE"

mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName, Source, CONCAT('->') AS Arrow, Destination FROM Logs WHERE EntryID=$LOGSID;" >> "$TFILE"
if [[ -e /opt/artemis/cache/$MD5 ]]; then
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName, Source, CONCAT('->') AS Arrow, Destination FROM Logs WHERE EntryID IN ($IDLIST);" \
	>> "$TFILE"
fi
# VirusTotal analysis
if [[ -n $VTAPI ]]; then
	# Check if an analysis already exists
	if [[ $(curl -sI https://www.virustotal.com/en/file/"$SHA256"/analysis/ | awk '/^HTTP/ {print $2}') -ne 200 ]]; then      # Analysis does not exist
		# Upload file to VirusTotal for scanning
		VTOUT=$(curl -s --request POST \
			--url 'https://www.virustotal.com/vtapi/v2/file/scan' \
			--form 'apikey='"$VTAPI" \
			--form 'file=@'"$1")
		# Check if the file was too large to be scanned via API
                if echo "$VTOUT" | grep -q "Your client issued a request that was too large."; then
                        VTLINK="The file was too large to be automatically scanned via API. Please upload the file manually."
                else
                        # Extract the scan results link from the output
                        VTLINK=$(echo -n "$VTOUT" | cut -d',' -f6 | sed 's/\( "permalink": "\|"\)//g')
                fi
	else
		# Analysis already exists
		VTLINK="https://www.virustotal.com/en/file/$SHA256/analysis/"
	fi
else
	# Analysis page
	VTLINK="https://www.virustotal.com/en/file/$SHA256/analysis/"
fi
printf "VirusTotal: %s\n" "$VTLINK" >> "$TFILE"
sendmail -vt < "$TFILE"
rm -f "$TFILE"
}

filescan() {
SHA256=$(sha256sum "$1" | cut -d' ' -f1)
MD5=$(md5sum "$1" | cut -d' ' -f1)
FILENAME=$(basename "$1") # File name only
EXITTIME="$(date +%s).$(date +%N | head -c3)"
QTIME=$(echo "scale=3; $EXITTIME - $ENTRYTIME" | bc)
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET QTime=$QTIME WHERE EntryID=$LOGSID;"
HASHID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache WHERE Hash='$SHA256' LIMIT 1;")
if [[ -z $HASHID ]]; then	# Hash does not exist in the Cache Table
	HASHID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO Cache (Hash, Hits, TimeStamp) VALUES ('$SHA256', 1, $(date +%s%N)); SELECT LAST_INSERT_ID();")
	SCANNED=1
	TLOG=$(mktemp -p /tmp/artemis/)  # Temporary storage for log output
	date > "$TLOG"
	clamdscan --fdpass --stdout "$1" >> "$TLOG"
	RESULT=$?
	# Release the worker slot in the workers pid directory
	rm /opt/artemis/cache/workers/$BASHPID.pid
	if [[ $RESULT -eq 2 ]] && [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Result FROM Logs WHERE EntryID=$LOGSID;") -ne 2 ]]; then
		# If the result of the scan is an error and the file was scanned for the first time, then requeue the file for a second scan
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "INSERT INTO ScanQueue (FileName, TimeStamp, LogsID, EntryTime) VALUES ('$1', '$TSTAMP', $LOGSID,\
		$(date +%s).$(date +%N | head -c3));"
		# Update the Logs table with the result so orion knows that the file has been previously scanned
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID=$LOGSID;"
	else
		# Add the result of the scan to the Cache table
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Cache SET Result=$RESULT WHERE HashID=$HASHID;"
		# Update the Logs table with the data from the scanned file
		SCANTIME=$(grep Time "$TLOG" | awk '{print $2}')
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=$SCANNED, Result=$RESULT, ScanTime=$SCANTIME \
		WHERE EntryID=$LOGSID;"
		sleep 1 # Pause to allow any other processes that may be adding duplicate file entries to finish
		# If a duplicate hash file exists add the result to the Logs entries contained in the file
		if [[ -e /opt/artemis/cache/$SHA256 ]]; then
			# Find number of LogsIDs listed in the duplicate hash file
			NUMIDS=$(wc -l < "/opt/artemis/cache/$SHA256")
			if  [[ $NUMIDS -gt 1 ]]; then
				# Create an EntryID list to be used in queries
				while read LINE; do
					if [[ -z $IDLIST ]]; then
			       			IDLIST="$LINE"
			       		else
			       			IDLIST+=",$LINE"
			       		fi
				done </opt/artemis/cache/"$SHA256"
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID IN ($IDLIST);"
			else
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID=$(cat /opt/artemis/cache/$SHA256);"
			fi
		fi
		if [[ $RESULT -eq 1 ]]; then    #An exit code of 1 indicates that an infection has been detected.
			sendAlert "$1"
			# If Artemis has been configured to move infected files then move the file to the appropriate directory
			if [[ -n $IDIR ]]; then
				if [[ -e /opt/artemis/cache/$SHA256 ]]; then
			       		# Move each copy of the infected file to the appropriate directory
			       		while read LINE; do
				       		IFILE=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName FROM Logs WHERE EntryID=$LINE;")
						mv "$DIR$IFILE" "$IDIR$IFILE"
						chmod 600 "$IDIR$IFILE"
					done </opt/artemis/cache/"$SHA256"
				fi
				mv "$1" "$IDIR$FILENAME"
				chmod 600 "$IDIR$FILENAME"
			fi
		fi
		if [[ -e /opt/artemis/cache/$SHA256 ]]; then
	       		rm /opt/artemis/cache/"$SHA256"
		fi
	fi
	printf "SHA256: %s\n" "$SHA256" >> "$TLOG"
	printf "MD5: %s\n" "$MD5" >> "$TLOG"
	printf "Received: %s\n\n" "$TSTAMP" >> "$TLOG"
	cat "$TLOG" >> /var/log/virus-scan.log
	rm  "$TLOG"
	# Cache table maintenance
	# Remove any existing duplicate hashes
	DUPHASH=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Hash FROM Cache GROUP BY Hash HAVING COUNT(*) > 1 LIMIT 1;")
	while [[ -n $DUPHASH ]]; do
		DEL=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache WHERE Hash='$DUPHASH' ORDER BY TimeStamp ASC LIMIT 1;")
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE HashID=$DEL;"
		DUPHASH=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Hash FROM Cache GROUP BY Hash HAVING COUNT(*) > 1 LIMIT 1;")
	done
	# Remove entries that contain an error result.
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Result=2;"
	# If the cache is larger than the max cache size, delete hashes based on the greatest time interval since last hit
	while [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM Cache;") -gt $MAXHASH ]]; do
		DEL=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache ORDER BY TimeStamp ASC LIMIT 1;")
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE HashID=$DEL;"
	done
else	# Hash is present in the Cache table
	# Release the worker slot in the workers pid directory
	rm /opt/artemis/cache/workers/$BASHPID.pid
	# Update the Logs and Cache table entries
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=0 WHERE EntryID=$LOGSID;"
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Cache SET Hits=Hits+1, TimeStamp=$(date +%s%N) WHERE HashID=$HASHID;"
	# Get the result from the Cache table
	RESULT=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Result FROM Cache WHERE HashID=$HASHID;")
	if [[ $RESULT == "NULL" ]]; then
		echo "$LOGSID" >> /opt/artemis/cache/"$SHA256"
	else	# Result is present in the Cache table
		# Update the result in the Logs table
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID=$LOGSID;"
		if [[ $RESULT -eq 1 ]]; then
			sendAlert "$1"
			if [[ -n $IDIR ]]; then
				mv "$DIR$FILENAME" "$IDIR$FILENAME"
				chmod 600 "$IDIR$FILENAME"
			fi
		fi
	fi
fi
}

# Get variables from artemis.conf
DIR=$(grep SDIR "$CONF" | cut -d'=' -f2)
EMAIL=$(grep EMAIL "$CONF" | cut -d'=' -f2)
IDIR=$(grep IDIR "$CONF" | cut -d'=' -f2)
MAXPROC=$(grep MAXPROC "$CONF" | cut -d'=' -f2)
MAXHASH=$(grep MAXHASH "$CONF" | cut -d'=' -f2)
VTAPI=$(grep VTAPI "$CONF" | cut -d'=' -f2)

# Check that all required variables contain values
if [[ -z "$MAXPROC" ]] || [[ -z "$MAXHASH" ]] || [[ -z "$EMAIL" ]] || [[ -z "$DIR" ]]; then
	echo Orion: Invalid configuration detected! Check that the conf file has been properly configured.
	exit 1
fi

# Set a signal trap to initiate a graceful process shutdown
SIGNAL=0
trap  "((SIGNAL++))" SIGHUP

while [[ $SIGNAL -eq 0 ]]; do
	if [[ $(free | grep ^Mem: | awk '{print $7}') -lt 204800 ]]; then       # If available memory drops below 200 MB, Artemis initiates an automatic stop
                autoStop
        fi
	FILEID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileID FROM ScanQueue ORDER BY TimeStamp ASC LIMIT 1;")
	if [[ -n $FILEID ]]; then
		FILE=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName FROM ScanQueue WHERE FileID=$FILEID;")
		TSTAMP=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT TimeStamp FROM ScanQueue WHERE FileID=$FILEID;")
		LOGSID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT LogsID FROM ScanQueue WHERE FileID=$FILEID;")
		ENTRYTIME=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT EntryTime FROM ScanQueue WHERE FileID=$FILEID;")
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM ScanQueue WHERE FileID=$FILEID;"
		while [[ $(ls -A /opt/artemis/cache/workers/ | wc -l) -ge $MAXPROC ]]; do
			sleep 0.05
		done
		if [[ -f $FILE ]]; then
			filescan "$FILE" &
			# Add the worker to the workers pid directory
			touch /opt/artemis/cache/workers/$!.pid
		else
			echo "$(date) orion: $FILE - File not found! Skipping file." >> /var/log/artemis.err
		fi
	fi
done

exit
